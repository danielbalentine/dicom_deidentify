#This code handles the deidentification of DICOMFiles to replace the typical method of Deidentification using DICOM Browser (https://wiki.xnat.org/xnat-tools/dicombrowser)
#This code was written as a replacement method for the DICOM deidentification utilized by DISCOVERY clients. A link to the previous method utilized can be found discoverystudy.org.

#Begun: 2022-02-15

#The process of this code is decribed below:
#Interact with users to establish DICOM Files they would like to deindentify and prompt users to input their site id, patient id, and scan session id.
#Prompt users with a filebrowser in which they can select the parent folder where the scan session.
#Utilize the anon_for_discovery.das file (or a simaler version of it) to dictate which DICOMFields will be identified.
#Replace various fields with data (site ID, patient ID, scan session ID etc.) inputted by the user.
#Zip and package deidentified DICOM Files for the user.
#Create an error log to track any possible issue the user may encounter.

#ver 0.1 begun: 2022-02-15
#Author: Daniel G. Balentine, Martinos Center for Biomedical Imaging, Massachusetts General Hospital
#Email: dbalentine@mgh.harvard.edu (2022)

"""
2022-2-15
general scripting began. filebrowser implemented. .das file reader scripted.
*notes: implement a popup to prompt users to provide specific site and patient information.

2022-3-09
work has been done but just not noted. module create called program.gui which will be the basic GUI for user input. having issues with error handling.

2022-3-11
Hashing module is being implemented.
Dictionary to_replace module implemented. 

2022-3-14
Realign everything with proper 4 space tabs

"""
import hashlib
import numpy
import os
import pathlib
from pathlib import Path
import csv
import pandas as pd
import matplotlib.pyplot as plt
import pydicom
from pydicom.data import get_testdata_files
from pydicom.tag import Tag
import file_browser  #small FileBroswer module to help user select directory.
import os
import zipfile

#User Input: This will come from the program.gui module.
site_id = 610
participant_id = 105006
scan_session_id = 123444554443

#Values to be replaced can be placed here...key = dicom tag....value = replaced value... form { key : value }
to_replace_dic = {'00080080' : site_id, '00100010' : participant_id, '00100020' : participant_id}

#prompt filebrowser popup to select parent directory
directory_name = file_browser.browseDirectory()

#method to read in anon_for_discovery.das file
def das_file_reader(filename):
    global site_id
    global participant_id
    global scan_session_id
    to_remove = []
    to_hash = []	
	#open .das file
    with open(filename) as f:

		#read in lines of .das file
        f.readline()

		#iterate through each line of .das fil
        for line in f:

			#read in lines beginning with a -, which take the form of "- (****,****)"
            if line[0] == '-':  #try except statements so if there is a stray mark.

				#grab numerical values utiling form mentioned above
                value = line[3] + line[4] + line[5] + line[6] + line[8] + line[9] + line[10] + line[11]

				#append values to proper array, values now take form "********"
                to_remove.append(value)
						        
			#read in lines beggining with a "+", which take form "+ (****,****)" and denote a dicom value to be hashed	 
            if line[0] == "+":

				# append values to to_hash array, each element now takes form "********" 
                value = line[3] + line[4] + line[5] + line[6] + line[8] +line[9] + line[10] + line[11]
                to_hash.append(value)	
    
	#close the .das file
    f.close()


	#return arrays of values to be removed or replaced
    return to_remove,to_hash

#method call
to_remove,to_hash = das_file_reader('docs/anon_for_discovery.das')

#method for walking through parent folder, directory_name is a str variable generated by user from file_browser module.
def walk_through_files(directory_name):
    #array to store filepaths
	filepaths = []
 
    #loop to walk through each subdirectory
	for (root,dirs,files) in os.walk(directory_name):

        #identify each file that exists
		for file in files:

			#makes sure we are grabbing files and not sub directories
			if file != '':

				#join root name and filename to get full path: ex. root = 'C:/Desktop/ScanSession/diffusion' , file = 'D00004.dcm'
				fname = os.path.join(root,file)
		
            	#append the full file paths to an array
				filepaths.append(fname)
	return filepaths

#method call
filepaths = walk_through_files(directory_name)



#hashing method
def __hash(tag_value):
	hash_value = hashlib.sha256(str(tag_value)).encode('utf-8')
	print(hash_value)
	return hash_value



#method to deidentify files, filepaths is a list of type str with the full path of each file.
def deidentify_files(filepaths):
    global to_remove
    global to_hash
    global to_replace_dic
	#open each file with Pydicom dcmread method
    for file in filepaths:
        ds = pydicom.dcmread(file)

		#try to remove each value from the to_remove array
        for i in to_remove:
            try:
				#put tag(i) into int based 16 form.
                ds[int(i,16)].value = ''

#if the specific key in to_remove is not in the DicomFile throw error 'Value ******** is not in the dicom file"
            except:
                print("Value " + i + " is not in the dicom file")
                pass

        for i in to_hash:
            try:
                ds[int(i,16)].value = __hash(ds[int(i,16)].value)

            except:
                print("Hash Value " + i + " is not in the dicom file")
                pass
				
        for i in to_replace_dic:
            #i represents the dicom tag, to_replace_dic[i] is the value that will replace
            try:
                ds[int(i,16)].value = to_replace_dic[i]    
            
            except:
                print("Replace Value" + i + " is not in the dicom file")
                pass		

  
        print(ds)

deidentify_files(filepaths)



#site ID will be inputed by the user...maybe prompt the users to enter this information?tkinter? 
#print(to_hash)

#filename = 'D0165.dcm'
#ds = pydicom.dcmread(filename) #plan data

#DICOM Keyword
#ds.PatientName


#DICOM Tag Number
#patient_name = ds[0x10,0x10].value
#patient_name = ds[int('00100010',16)].value     #This is the way Chris utilized tag calls.
                                                #if you don't need to convert to JSON sue says key values will be fine.
#Overwrite Data
#name = ds[int('00100010',16)]
#name.value = 'Jeremy Haley'
#name.value  # This will just print the value of the name...if we just do print(name) then we will print the full line.


#print(ds[int('00080012',16)])



#Display Image with Matplotlib
#plt.imshow(ds.pixel_array, cmap = plt.cm.gray)
#plt.show()


#required fields are factors that the sites actually need
#fields to remove are the things that could possibly lead to identifying data
#0010 has to do with patient, 0008 has to do with the site,0018 has aquisition information, if the group number is even they are official diacom tags. 
#odd numbers are private tags.specific to manufacturer.
#there is a lot of checking that has to go on with private tags...try accept statements are good. 
#Fields to Remove means remove everything in here...it doesn't matter what the labs preference mean.
#Fields OK to keep, you hash up the name with a unique has so it all says the same stuff if the factors are the same.
#only hash where it says to preferrably hash.








