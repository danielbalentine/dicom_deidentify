* more whitespace in entry widget and label for Patient ID
* hardcoded numbers in width and height in self.canvas, can make those quick changes to window size, also change in geometry
* something you have oppurtunities to move multiple time, line 101 could put comment saying what is x and what is y
*180 , sys.exit()
*comment line 201,202
*223 markvcid_siteID and discovery sit_ID could sit in a space for constants (in the init), could create a whole new file for this but dont need to for this
*but then variables need to be very explicit
*233 len(self.patientID) == 9
*comment line 255, hella confusing
*260, monitor thread could be called check thread status
*unit test: example is a calculator, verify everysingle part of your code works
*great unit test will test everysingle combination and possible outcome
*want a unit test to see if all the fields are filled in, maybe need a unit test for front end. 
*unit test are only as good as the coder
* very descriptive names for unit tests
*pytest is also an option, setup and teardown.
*teardown so you don't have to manually delete everything
*how do you do a unit test for the front end?
*in front end, make sure mechanics of variable storage
* make specific errors, check that those errors work.
*can find gihub unit tests
Backend:
*class DataSet is a garbage name
*191: file is somepath/ file name
*weird string difference...can you communicate with comments? starting from 245, comment line 256. 
*320...lot of arguments, make a mini class, put all of the variables you need into one object, class backend_input,
*324 .das file path
*except KeyError as e:
*should we log what tags don't exist ? make a list called tags that were missing. definately log it. 

